name: Deploy to AWS ECS

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api
          platforms: linux/amd64
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/stepexplorer-api:latest

      - name: Run migrations via ECS
        id: migrations
        run: |
          echo "üóÑÔ∏è Running database migrations..."

          # Get current task definition
          TASK_DEF=$(aws ecs describe-services \
            --cluster stepexplorer-cluster \
            --services stepexplorer-api-service \
            --query 'services[0].taskDefinition' --output text)

          echo "üìù Using task definition: $TASK_DEF"

          # Get container name
          CONTAINER_NAME=$(aws ecs describe-task-definition \
            --task-definition $TASK_DEF \
            --query 'taskDefinition.containerDefinitions[0].name' --output text)

          echo "üì¶ Container name: $CONTAINER_NAME"

          # Create and run migration task
          TASK_ARN=$(aws ecs run-task \
            --cluster stepexplorer-cluster \
            --task-definition $TASK_DEF \
            --overrides "{\"containerOverrides\":[{\"name\":\"$CONTAINER_NAME\",\"command\":[\"npm\",\"run\",\"db:migrate\"]}]}" \
            --network-configuration "$(aws ecs describe-services --cluster stepexplorer-cluster --services stepexplorer-api-service --query 'services[0].networkConfiguration' --output json)" \
            --launch-type FARGATE \
            --started-by "GitHub-Migration" \
            --query 'tasks[0].taskArn' --output text)

          echo "üöÄ Started migration task: $TASK_ARN"

          # Wait for task to complete
          echo "‚è≥ Waiting for migration to complete..."
          aws ecs wait tasks-stopped \
            --cluster stepexplorer-cluster \
            --tasks $TASK_ARN

          # Check if task succeeded
          EXIT_CODE=$(aws ecs describe-tasks \
            --cluster stepexplorer-cluster \
            --tasks $TASK_ARN \
            --query 'tasks[0].containers[0].exitCode' --output text)

          echo "üîç Migration exit code: $EXIT_CODE"

          if [ "$EXIT_CODE" = "0" ]; then
            echo "‚úÖ Migrations successful"
          else
            echo "‚ùå Migrations failed with exit code $EXIT_CODE"
            exit 1
          fi

      - name: Deploy to ECS
        if: success()
        run: |
          echo "üöÄ Deploying to ECS..."
          aws ecs update-service \
            --cluster stepexplorer-cluster \
            --service stepexplorer-api-service \
            --force-new-deployment

          echo "‚úÖ Deployment started!"
