name: Deploy to AWS ECS

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api
          platforms: linux/amd64
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/stepexplorer-api:latest

      - name: Run database migrations
        run: |
          echo "üóÑÔ∏è Running database migrations..."

          # Get network configuration from existing service
          SUBNETS=$(aws ecs describe-services \
            --cluster stepexplorer-cluster \
            --services stepexplorer-api-service \
            --query 'services[0].networkConfiguration.awsvpcConfiguration.subnets' \
            --output text | tr '\t' ',')

          SECURITY_GROUPS=$(aws ecs describe-services \
            --cluster stepexplorer-cluster \
            --services stepexplorer-api-service \
            --query 'services[0].networkConfiguration.awsvpcConfiguration.securityGroups' \
            --output text | tr '\t' ',')

          echo "üìù Subnets: $SUBNETS"
          echo "üìù Security Groups: $SECURITY_GROUPS"

          # Run migration task
          TASK_ARN=$(aws ecs run-task \
            --cluster stepexplorer-cluster \
            --task-definition stepexplorer-api \
            --overrides '{"containerOverrides":[{"name":"api","command":["npm","run","db:migrate"]}]}' \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNETS],securityGroups=[$SECURITY_GROUPS],assignPublicIp=ENABLED}" \
            --launch-type FARGATE \
            --started-by "GitHub-Migration" \
            --query 'tasks[0].taskArn' \
            --output text)

          echo "üöÄ Migration task: $TASK_ARN"

          # Wait for task to complete (max 10 minutes)
          echo "‚è≥ Waiting for migrations..."
          for i in {1..20}; do
            TASK_STATUS=$(aws ecs describe-tasks \
              --cluster stepexplorer-cluster \
              --tasks $TASK_ARN \
              --query 'tasks[0].lastStatus' \
              --output text)
            
            echo "üìä Status: $TASK_STATUS ($i/20)"
            
            if [ "$TASK_STATUS" = "STOPPED" ]; then
              break
            fi
            
            sleep 30
          done

          # Check result
          EXIT_CODE=$(aws ecs describe-tasks \
            --cluster stepexplorer-cluster \
            --tasks $TASK_ARN \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)

          echo "üîç Migration exit code: $EXIT_CODE"

          if [ "$EXIT_CODE" = "0" ]; then
            echo "‚úÖ Migrations successful"
          else
            echo "‚ùå Migrations failed"
            
            # Get logs for debugging
            echo "üìã Migration logs:"
            aws logs get-log-events \
              --log-group-name "/ecs/stepexplorer-api" \
              --log-stream-name "ecs/api/$(echo $TASK_ARN | cut -d'/' -f3)" \
              --start-time $(date -d '10 minutes ago' +%s)000 \
              --query 'events[*].message' \
              --output text 2>/dev/null || echo "No logs available"
            
            exit 1
          fi

      - name: Update ECS service
        if: success()
        run: |
          echo "üöÄ Deploying API..."

          aws ecs update-service \
            --cluster stepexplorer-cluster \
            --service stepexplorer-api-service \
            --force-new-deployment \
            --query 'service.deployments[0].status'

          echo "‚úÖ Deployment started!"

      - name: Wait for deployment
        if: success()
        run: |
          echo "‚è≥ Waiting for service to stabilize..."

          aws ecs wait services-stable \
            --cluster stepexplorer-cluster \
            --services stepexplorer-api-service

          echo "‚úÖ Deployment complete!"
