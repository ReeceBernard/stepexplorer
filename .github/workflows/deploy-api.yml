name: Deploy to AWS EC2

on:
  push:
    branches: [main]
    paths:
      ["apps/api/**", "docker-compose.yml", ".github/workflows/deploy-api.yml"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api
          platforms: linux/amd64
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/stepexplorer-api:latest

      - name: Deploy to EC2
        run: |
          echo "🚀 Deploying to EC2..."

          # Get the EC2 instance IP
          EC2_IP=$(aws ec2 describe-addresses \
            --filters "Name=tag:Name,Values=stepexplorer-api-eip" \
            --query 'Addresses[0].PublicIp' --output text)

          echo "📍 EC2 IP: $EC2_IP"

          # Setup SSH
          echo "${{ secrets.EC2_PRIVATE_KEY }}" | tr -d '\r' > private_key.pem
          chmod 600 private_key.pem
          mkdir -p ~/.ssh
          ssh-keyscan -H $EC2_IP >> ~/.ssh/known_hosts

          # Deploy to EC2
          ssh -i private_key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_IP << 'ENDSSH'
            set -e
            echo "🚀 Starting deployment..."
            
            echo "📦 Updating application code..."
            cd /home/ec2-user/stepexplorer
            
            # Cleanup for new deploy 
            docker system prune -a -f --volumes
            docker container prune -f
            docker image prune -a -f
            docker volume prune -f
            git pull origin main
            
            # Create environment file
            cat > .env << EOF
          NODE_ENV=production
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          REDIS_URL=redis://redis:6379
          EOF
            
            # Login to ECR and pull latest image
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 130046065749.dkr.ecr.us-east-1.amazonaws.com
            docker-compose pull api
            
            # Run migrations and restart services
            echo "🗄️ Running migrations..."
            docker-compose run --rm api npm run db:migrate:prod || echo "❌  Migration failed"
            
            echo "🔄 Restarting services..."
            docker-compose down
            docker-compose up -d
            
            echo "✅ Deployment completed!"
          ENDSSH

          rm private_key.pem
          echo "🎉 Deployment successful!"

      - name: Health Check
        run: |
          echo "🏥 Health check..."
          EC2_IP=$(aws ec2 describe-addresses \
            --filters "Name=tag:Name,Values=stepexplorer-api-eip" \
            --query 'Addresses[0].PublicIp' --output text)

          sleep 30

          for i in {1..5}; do
            if curl -f http://$EC2_IP/health; then
              echo "✅ Health check passed!"
              exit 0
            else
              echo "⏳ Waiting... (attempt $i/5)"
              sleep 10
            fi
          done

          echo "❌ Health check failed"
          exit 1
